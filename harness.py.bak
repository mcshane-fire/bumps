#!/bin/python

# todo:
#
# check that crews from the same college appear in order
# collect results/crews for each college for summary statistics
#   most/least bumps in a division all week
#   which day overbumps occur, etc
# add cra club names
# figure out how to tell how long a piece of text is
# ability to cancel a division, so we don't see the lines (2001 & 2002 lents men)
# option to colour code lines per club


import sys, re

#import svgwrite
import simplesvg

highlight = None
stringout = False
readstdin = False


abbrev = {"Ca" : {'name' : "Caius", 'colours' : ['black', 'lightgreen']},
          "T"  : {'name' : "1st and 3rd", 'colours' : ['darkblue']}, 
          "E"  : {'name' : "Emmanuel", 'colours' : ['blue', 'pink']},
          "TH" : {'name' : "Trinity Hall", 'colours' : ['black', 'white']},
          "D"  : {'name' : "Downing", 'colours' : ['purple']},
          "J"  : {'name' : "Jesus", 'colours' : ['black', 'red']},
          "L"  : {'name' : "LMBC", 'colours' : ['red']},
          "Cu" : {'name' : "Churchill", 'colours' : ['pink']},
          "Cr" : {'name' : "Christ's", 'colours' : ['navy', 'white']},
          "SC" : {'name' : "St Catharine's", 'colours' : ['darkred']},
          "K"  : {'name' : "King's", 'colours' : ['purple', 'white']},
          "Q"  : {'name' : "Queens'", 'colours' : ['green']},
          "Pb" : {'name' : "Pembroke", 'colours' : ['lightblue', 'darkblue']},
          "Ph" : {'name' : "Peterhouse", 'colours' : ['darkblue', 'white']},
          "Cl" : {'name' : "Clare", 'colours' : ['yellow']},
          "CH" : {'name' : "Clare Hall", 'colours' : ['yellow', 'black', 'red']},
          "M"  : {'name' : "Magdalene", 'colours' : ['magenta']},
          "A"  : {'name' : "Addenbrooke's", 'colours' : ['blue']},
          "LC" : {'name' : "Lucy Cavendish", 'colours' : ['blue', 'black']},
          "G"  : {'name' : "Girton", 'colours' : ['green', 'white', 'red', 'white']},
          "F"  : {'name' : "Fitzwilliam", 'colours' : ['red', 'silver']},
          "CC" : {'name' : "Corpus Christi", 'colours' : ['darkred', 'white']},
          "W"  : {'name' : "Wolfson", 'colours' : ['blue', 'yellow']},
          "Dw" : {'name' : "Darwin", 'colours' : ['blue', 'yellow', 'lightblue', 'red']},
          "SE" : {'name' : "St Edmund's", 'colours' : ['blue', 'lightblue', 'white']},
          "HH" : {'name' : "Hughes Hall", 'colours' : ['white', 'blue', 'darkblue']},
          "SS" : {'name' : "Sidney Sussex", 'colours' : ['darkblue', 'red']},
          "S"  : {'name' : "Selwyn", 'colours' : ['lightgray', 'red', 'yellow']},
          "R"  : {'name' : "Robinson", 'colours' : ['blue', 'yellow']},
          "H"  : {'name' : "Homerton", 'colours' : ['lightgray', 'darkblue']},
          "CT" : {'name' : "CCAT", 'colours' : ['black', 'yellow']},
          "N"  : {'name' : "Newnham", 'colours' : ['yellow', 'silver', 'navy']},
          "NH" : {'name' : "New Hall", 'colours' : ['lightgray']},
          "VS" : {'name' : "Vet School", 'colours' : ['blue']},
          "QM" : {'name' : "QMABC", 'colours' : ['purple', 'white']},
          "TC" : {'name' : "Theological Colleges", 'colours' : ['lightgray']},
          "ME" : {'name' : "Murray Edwards", 'colours' : ['lightgray']},
          "AR" : {'name' : "Anglia Ruskin", 'colours' : ['black', 'yellow']},
          "HHL" : {'name' : "Hughes/Lucy", 'colours' : ['white', 'blue', 'darkblue']}}

roman = ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X",
         "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII", "XIX", "XX"];

def add_div(div, str):
    #print str
    div.append({'gain' : 0, 'blades' : False, 'highlight' : False})

    str = str.strip()
    short = str.strip("0123456789")
    if short in abbrev:
        num = str.strip("abcdefghijklmnopqrtsuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
        if len(num) > 0:
            str = "%s %s" % (abbrev[short]['name'], roman[int(num)-1])
        else:
            str = abbrev[short]['name']
        div[-1]['college'] = abbrev[short]

    div[-1]['start'] = str
    div[-1]['end'] = str

  

def read_file(name, highlight = None):
    if name != None:
        input = open(name, "r")
    else:
        input = sys.stdin
    ret = {}
    ret['title'] = "Set name"
    ret['days'] = 4
    ret['crews'] = 0
    ret['divisions'] = []
    ret['results'] = []
    curdiv = []
    for line in input:
        line = line.strip(" \t\r\n")
        if line == "":
            continue
        p = line.split(",")
        if p[0] == "Set":
            ret['set'] = p[1]
        elif p[0] == "Short":
            ret['short'] = p[1]
        elif p[0] == "Gender":
            ret['gender'] = p[1]
        elif p[0] == "Year":
            ret['year'] = int(p[1])
        elif p[0] == "Days":
            ret['days'] = int(p[1])
        elif p[0] == "Division":
            if len(curdiv) > 0:
                ret['divisions'].append(curdiv)
                curdiv = []
            if len(p) > 1:
                for i in p[1:]:
                    add_div(curdiv, i)
                    ret['crews'] = ret['crews'] + 1
        elif p[0] == "Results":
            if curdiv != None and len(curdiv) > 0:
                ret['divisions'].append(curdiv)
                curdiv = None
            for i in p[1:]:
                i = i.strip()
                if not i.startswith("#"):
                    ret['results'].append(i)
        elif curdiv == None:
            for i in p:
                ret['results'].append(i)
        else:
            for i in p:
                add_div(curdive, i)
                ret['crews'] = ret['crews'] + 1

    if name != None:
        input.close()

    if highlight != None:
        for div in ret['divisions']:
            for crew in div:
                if crew['start'].startswith(highlight):
                    crew['highlight'] = True
                    
    return ret

def create_blank_move(event):
    event['move'] = []
    event['completed'] = []
    for d in range(0, event['days']):
        today = []
        comp = []
        for n in event['divisions']:
            div = []
            for c in n:
                div.append(0)
            today.append(div)
            comp.append(False)
        event['move'].append(today)
        event['completed'].append(comp)

def process_bump(move, div_num, crew, up):
    if crew - up < 1:
        print "Bumping up above the top of the division: div %d, crew %d, up %d" % (div_num, crew, up)
        return False
    if move[div_num-1][crew-1-up] != 0:
        print "Bumping a crew that has already got a result"
        return False
    move[div_num-1][crew-1-up] = -up
    if crew > len(move[div_num-1]):
        # sandwich crew bumping up, need to find out which crew is sandwich boat
        for p in range(0, len(move[div_num])):
            #print "crew %d, move %d, sum:%d" % (p, move[div_num][p], p - move[div_num][p])
            if p - move[div_num][p] == 0:
                move[div_num][p] = move[div_num][p] + up
                break
    else:
        move[div_num-1][crew-1] = up
    return True

def process_results(event):
    create_blank_move(event)

    all = ""
    for r in event['results']:
        all = all + r

    pat = re.compile('r|t|u|o[0-9]*|e-?[0-9]*')
    m = pat.findall(all)
    day_num = 0  # 1 is the first day
    div_num = 0  # 1 is the first division
    crew = 0     # 1 is the top crew in each division
    move = None
    for c in m:
        #print "\nNew command:%s (day:%d div:%d crew:%d)" % (c, day_num, div_num, crew)

        while move != None and crew <= len(move[div_num-1]) and crew > 0 and move[div_num-1][crew-1] != 0:
            #print "Skipping crew:%d, got %d" % (crew, move[div_num-1][crew-1])
            # if we've already got a result for this crew, then we can 
            # ignore it
            crew = crew - 1

        if crew == 0:
            if c == 't':
                # if we get a terminate message and we've just completed
                # a division, then assume we're terminating the previous
                # division, rather than this one, need to enter the result
                # from at least one crew before being able to terminate
                continue

            if div_num <= 1:
                if day_num == event['days']:
                    print "Run out of days of racing with more results still to go"
                    return
                move = event['move'][day_num]
                day_num = day_num + 1
                div_num = len(event['divisions'])+1
                #print "Moving to day:%d" % (day_num)

            div_num = div_num - 1;
            crew = len(move[div_num-1])
            if div_num < len(event['divisions']):
                # add one for sandwich crew
                crew = crew + 1
            #print "Moving to div:%d crew:%d" % (div_num, crew)

        #print "Processing command:%s (day:%d div:%d crew:%d)" % (c, day_num, div_num, crew)

        event['completed'][day_num-1][div_num-1] = True

        if c == 'r':
            # row over, move to the next crew
            crew = crew - 1
        elif c == 'u':
            # up 1
            if process_bump(move, div_num, crew, 1) == False:
                return
            crew = crew - 2
        elif c.startswith("o"):
            up = int(c[1:])
            if process_bump(move, div_num, crew, up) == False:
                return
            crew = crew - 1
        elif c.startswith("e"):
            up = int(c[1:])
            if crew > len(move[div_num-1]):
                move[div_num][0] = move[div_num][0] + up
            else:
                move[div_num-1][crew-1] = up
            crew = crew - 1
        elif c == 't':
            crew = 0

    # work out finishing names and blades, etc
    for div_num in range(0, len(event['divisions'])):
        for crew_num in range(0, len(event['divisions'][div_num])):
            nc = crew_num;
            nd = div_num
            gain = 0
            blades = True
            for m in event['move']:
                gain = gain + m[nd][nc]
                if m[nd][nc] <= 0:
                    blades = False
                nc = nc - m[nd][nc]

                while nc < 0:
                    nd = nd - 1
                    nc = nc + len(m[nd])
                while nc >= len(m[nd]):
                    nc = nc - len(m[nd])
                    nd = nd + 1

            if nd == 0 and nc == 0 and event['completed'][-1][0] == True:
                blades = True

            event['divisions'][div_num][crew_num]['gain'] = gain
            event['divisions'][div_num][crew_num]['blades'] = blades
            event['divisions'][nd][nc]['end'] = event['divisions'][div_num][crew_num]['start']
            

scale = 16
right = 130
sep = scale*2
dash = 6

def draw_divisions(out, xoff, yoff, event, space, extra = None):
    top = yoff
    for div_num in range(0, len(event['divisions'])):
        for crew_num in range(0, len(event['divisions'][div_num])):
            ypos = top + (scale/2)
            xpos = xoff
            c = crew_num
            d = div_num
            crew = event['divisions'][div_num][crew_num]
            colour = "gray"
            linewidth = 1
            if extra != 'colours':
                if crew['highlight']: 
                    colour = "blue"
                    linewidth = 3
                elif crew['blades']:
                    colour = "red"
                    linewidth = 2
                
            linepoints = []
            linepoints.append([xpos, ypos]);
                              
            for day in range(0, event['days']):
                if event['completed'][day][d] == False:
                    break

                t = event['move'][day]

                up = t[d][c]
                #out.add(out.line(start=(xpos, ypos), end=(xpos+scale, ypos-(up*scale)), stroke=colour, stroke_width=linewidth))
                xpos = xpos + scale
                ypos = ypos - (up*scale)
                linepoints.append([xpos, ypos])                                  

                c = c - up;
                while c < 0:
                    d = d-1
                    c += len(t[d])
                while c >= len(t[d]):
                    c -= len(t[d])
                    d = d+1

            if extra == 'colours' and 'college' in crew and 'colours' in crew['college']:
                colours = crew['college']['colours']
                if len(colours) == 1:
                    out.add(out.polyline(points=linepoints, stroke=colours[0], stroke_width=3, fill='none'))
                else:
                    arr = [dash, (dash/2) * (len(colours)-1)]
                    off = 0
                    nextoff = arr[1]
                    for c in colours:
                        polyline = out.polyline(points=linepoints, stroke=c, stroke_width=3, fill='none')
                        polyline.dasharray(arr, offset=off)
                        out.add(polyline)
                        off = nextoff
                        nextoff = nextoff - (dash/2)
                        arr = [dash/2, (dash/2) * len(colours)]

            else:
                out.add(out.polyline(points=linepoints, stroke=colour, stroke_width=linewidth, fill='none'))

            top = top + scale

    top = yoff
    for d in event['divisions']:
        out.add(out.rect(insert=(xoff-space,top), size=((event['days'] * scale)+(space*2), len(d) * scale), stroke='black', fill='none'))
        top = top + (scale * len(d))

def draw_extra_text(out, xoff, yoff, event, extra):
    top = yoff
    for div_num in range(0, len(event['divisions'])):
        d = event['divisions'][div_num]

        label = None
        fontsize = 25
        colour = 'lightgray'

        if extra == 'number' and len(d) > 8:
            label = "Division %d" % (div_num+1)
        elif extra == 'title' and len(d) > 12:
            label = "%s %d - %s" % (event['short'], event['year'], event['gender'])
        elif extra == 'both':
            fontsize = 12
            colour = 'darkred'
            if len(d) > 10:
                label = "%s %d - %s, Division %d" % (event['short'], event['year'], event['gender'], div_num+1)
            else:
                label = "Division %d" % (div_num+1)

        if label != None:
            text = out.add(out.text(label, insert=(xoff, top+5), font_size=fontsize, stroke_width=0, fill=colour))
            text.rotate(90, [xoff, top+5])
        top = top + (scale * len(d))


def draw_numbers(out, xoff, yoff, event, align, reset = False):
    top = yoff
    number = 1
    for d in event['divisions']:
        for crew in d:
            top = top + scale
            out.add(out.text(str(number), insert=(xoff, top-3), font_size=13, stroke_width=0, fill='gray', text_anchor=align))
            number = number + 1
        if reset:
            number = 1       

def draw_crews(out, xoff, yoff, event, gain, align):
    top = yoff
    for d in event['divisions']:
        for crew in d:
            top = top + scale
            colour = 'black'
            if crew['highlight']:
                colour = 'blue'
            elif crew['blades']:
                colour = 'red'
            out.add(out.text(crew['start'], insert=(xoff,top-3-(gain * scale * crew['gain'])), font_size=13, stroke_width=0, fill=colour, text_anchor=align))

def draw_stripes(out, xoff, yoff, width, x2off, event, event2 = None, extra = 0):
    top = yoff
    alt = 0

    num = 0
    if event2 != None:
        num = event2['crews']

    cn = 0
    for d in event['divisions']:
        for crew in d:
            swidth = width
            if cn < num:
                swidth = swidth + extra
            if alt == 1:
                rect = out.add(out.rect(insert=(xoff,top), size=(swidth, scale), fill='lightgray', stroke_width=0))
                rect.fill(opacity=0.35)
            alt = 1 - alt
            top = top + scale
            cn = cn + 1

    if x2off != None and False:
        alt = 0
        for r in range(0, event['days']):
            if alt == 1:
                rect = out.add(out.rect(insert=(x2off + (r * scale), yoff), size=(scale, top-yoff), fill='lightgray', stroke_width=0))
                rect.fill(opacity=0.15)
            alt = 1 - alt

def draw_join(out, xoff, yoff, event, event2):
    added = []
    yoff = yoff + (scale/2)
    cn2 = 0
    for div2 in event2['divisions']:
        for crew2 in div2:
            cn = 0
            found = False
            for div in event['divisions']:
                for crew in div:
                    if crew2['start'] == crew['end']:
                        found = True
                        break
                    cn = cn + 1
                if found:
                    break
            if found:
                out.add(out.line(start=(xoff, yoff + (scale*cn)), end=(xoff + sep, yoff + (scale*cn2)), stroke = 'lightgray', stroke_width = 1))
            else:
                added.append({'height' : (yoff + (scale * cn2)), 'crew' : crew2})
            cn2 = cn2 + 1

    xsep = sep / (len(added)+1)
    xpos = xoff + xsep
    ynext = yoff + (scale * event['crews']) - (scale/2) + 4
    ysep = 12
    for crew in added:
        out.add(out.line(start=(xpos, crew['height']), end=(xpos, ynext), stroke = 'gray', stroke_width = 1))
        out.add(out.line(start=(xpos, crew['height']), end=(xoff + sep, crew['height']), stroke = 'gray', stroke_width = 1))
        out.add(out.text(crew['crew']['start'], insert=(xpos, ynext+8), font_size=9, stroke_width=0, fill='black', text_anchor='end'))
        xpos = xpos + xsep
        ynext = ynext + ysep
    

def write_svg(event, name):
    #out = svgwrite.Drawing(name, profile="tiny")
    out = simplesvg.Drawing(name, profile="tiny")

    draw_stripes(out, 0, 0, (right*2) + (scale * event['days']), right, event)
    draw_numbers(out, 3, 0, event, 'start', True)
    draw_numbers(out, (2*right) + (scale * event['days']) -3, 0, event, 'end', False)
    #draw_extra_text(out, 20, 0, event, 'number')
    #draw_extra_text(out, (2*right) + (scale * event['days']) -40, 0, event, 'name') 
    draw_extra_text(out, -15, 0, event, 'both')

    draw_crews(out, right-3, 0, event, 0, 'end')
    draw_crews(out, right + (scale * event['days']) + 3, 0, event, 1, 'start')

    draw_divisions(out, right, 0, event, right)

    if stringout:
        print out.tostring()
    else:
        out.save()

def write_multi_svg(sets, name):
    #out = svgwrite.Drawing(name, profile="tiny")
    out = simplesvg.Drawing(name, profile="tiny")

    xpos = right
    eleft = right
    for event_num in range(0, len(sets)):
        event = sets[event_num]
        event2 = event
        extra = sep
        if event_num < len(sets)-1:
            event2 = sets[event_num+1]
        else:
            extra = right

        out.add(out.text(str(event['year']), insert=(xpos+(scale * event['days'])/2, -3), font_size=13, stroke_width=0, fill='black', text_anchor='middle'))
        draw_stripes(out, xpos-eleft, 0, eleft + (scale * event['days']), xpos, event, event2, extra)
        eleft = 0
        xpos = xpos + (scale * event['days']) + sep

        if event_num < len(sets)-1:
            draw_join(out, xpos-sep, 0, event, event2)

    draw_numbers(out, 3, 0, sets[0], 'start', False)
    draw_numbers(out, xpos - sep + right - 3, 0, sets[-1], 'end', False)

    draw_crews(out, right-3, 0, sets[0], 0, 'end')
    draw_crews(out, xpos - sep + 3, 0, sets[-1], 1, 'start')

    xpos = right
    for event in sets:
        draw_divisions(out, xpos, 0, event, 0, 'colours')
        xpos = xpos + (scale * event['days']) + sep

    if stringout:
        print out.tostring()
    else:
        out.save()

def step_on(event):
    for div in event['divisions']:
        for crew in div:
            crew['start'] = crew['end']
            crew['gain'] = 0
            crew['blades'] = False

    event['year'] = event['year']+1
    del event['move']
    del event['completed']
    event['results'] = []
        
        
def write_file(event, name):
    output = open(name, "w")
    output.write("Set,%s\n" % event['set'])
    output.write("Short,%s\n" % event['short'])
    output.write("Gender,%s\n" % event['gender'])
    output.write("Year,%s\n" % event['year'])
    if event['days'] != 4:
        output.write("Days,%s\n" % event['days'])

    output.write("\n")

    for i in event['divisions']:
        output.write("Division")
        for crew in i:
            for p in abbrev:
                if crew['start'].startswith(abbrev[p]['name']):
                    fin = p
                    sh = crew['start'][len(abbrev[p]['name']):].strip()
                    if len(sh) > 0:
                        for k in range(0, len(roman)):
                            if sh == roman[k]:
                                fin = fin + str(k+1)
                                break
                    output.write(",%s" % fin)
                    break
        output.write("\n")
    output.write("\n")
    if len(event['results']) > 0:
        output.write("Results\n")
        for i in event['results']:
            output.write("  %s\n" % i)

    output.close()

def addn(d, k, n):
    if k in d:
        d[k] = d[k] + n
    else:
        d[k] = n

def get_ave(d):
    total = 0
    num = 0
    for k in d:
        total = total + (k * d[k])
        num = num + d[k]
    return float(total) / float(num)

def get_stats(event, days):
    up = []
    for d in event['divisions']:
        up.append({})
    upa = {}

    for day_num in range(0, len(event['move'])):
        m = event['move'][day_num]
        for div_num in range(0, len(m)):
            if event['completed'][day_num][div_num]:
                dstat = up[div_num]
                for s in m[div_num]:
                    if s < 0:
                        s = -s
                    addn(days[day_num], s, 1)
                    addn(dstat, s, 1)
                    addn(upa, s, 1)

    #for d in range(0, len(up)):
    #    print "%s/%s/%s %d %g %s" % (event['short'], event['year'], event['gender'], d+1, get_ave(up[d]), up[d])

    #print "%s/%s/%s %g %s" % (event['short'], event['year'], event['gender'], get_ave(upa), upa)

sys.argv.pop(0)
while len(sys.argv) > 0:
    if sys.argv[0] == '-h':
        sys.argv.pop(0)
        highlight = sys.argv.pop(0)
    elif sys.argv[0] == '-w':
        sys.argv.pop(0)
        stringout = True
    elif sys.argv[0] == '-r':
        sys.argv.pop(0)
        readstdin = True
    else:
        break

sets = []
while len(sys.argv) > 0:
    #print "doing %s" % sys.argv[0]
    sets.append(read_file(sys.argv.pop(0), highlight))

if readstdin:
    sets.append(read_file(None, highlight))

#days = [{}, {}, {}, {}]

for s in sets:
    process_results(s)
    #get_stats(s, days)

#for d in days:
#    print "%g %s" % (get_ave(d), d)

if len(sets) == 1:
    write_svg(sets[0], "out.svg")
    step_on(sets[0])
    write_file(sets[0], "out.txt")
else:
    write_multi_svg(sets, "out.svg")
